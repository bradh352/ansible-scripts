---
# Variables that may be provided to this task:
#   mariadb_ignore_offline_nodes default false
#   mariadb_start_all_nodes default true


- name: Fixup ansible password for this playbook if it was changed in the base role
  set_fact:
    ansible_password: "{{ superuser_password }}"
    ansible_become_pass: "{{ superuser_password }}"
  delegate_to: "{{ item }}"
  delegate_facts: True
  when: ansible_user == superuser and ((superuser_created is defined and superuser_created.changed) or (superuser_pwchanged is defined and superuser_pwchanged.changed))
  with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

- name: Query if any servers are online
  shell: "/usr/local/bin/clustercheck"
  register: clusterstatus
  delegate_to: "{{ item }}"
  with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"
  run_once: true
  ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
  failed_when: false
  changed_when: false

- name: Record online cluster status
  set_fact:
    mariadb_online_nodes: >-
      {%- set online_nodes = [] %}
      {%- for node in clusterstatus.results %}
      {%-   if node.rc|default(1) == 0 %}
      {%-     do online_nodes.append(node.item) %}
      {%-   endif %}
      {%- endfor %}
      {{- online_nodes|sort -}}

- name: Bootstrap the cluster
  when: mariadb_online_nodes | length == 0
  run_once: true
  block:
    - name: Ensure mariadb is shut down on all nodes
      service:
        name: mariadb
        state: stopped
      delegate_to: "{{ item }}"
      ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
      with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

    - name: Query for nodes that have been started previously
      stat:
        path: /var/lib/mysql/grastate.dat
      register: grastate
      ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
      delegate_to: "{{ item }}"
      with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

    - name: Record previously started nodes
      set_fact:
        mariadb_previously_started_nodes: >-
          {%- set prior_nodes = [] %}
          {%- for node in grastate.results %}
          {%-   if node.stat.exists %}
          {%-     do prior_nodes.append(node.item) %}
          {%-   endif %}
          {%- endfor %}
          {{- prior_nodes -}}

    - name: Evaluate all nodes for the latest sequence number
      shell: "stat /var/lib/mysql/grastate.dat > /dev/null 2>&1 && sudo -u mysql /usr/sbin/mariadbd --wsrep-recover 2>&1 | grep 'WSREP: Recovered position' | sed -E 's/.*WSREP: Recovered position:.*:(.*)/\\1/'"
      register: cluster_sequence
      ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
      failed_when: false
      changed_when: false
      delegate_to: "{{ item }}"
      with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

    - name: Determine most up-to-date node
      set_fact:
        mariadb_bootstrap_node: >-
          {%- set node_sequence = {} %}
          {%- for node in cluster_sequence.results %}
          {%-   do node_sequence.update({ node.item: node.stdout_lines[0]|default(-1)|int }) %}
          {%- endfor %}
          {%- set best_node = node_sequence.items()|sort(attribute='1', reverse=true)|first %}
          {{- best_node[0] -}}

    - name: Query for nodes that have been started previously
      stat:
        path: /var/lib/mysql/grastate.dat
      register: mariadb_bootstrap_node_grastate
      delegate_to: "{{ mariadb_bootstrap_node }}"

    - name: Mark selected node as safe to bootstrap
      lineinfile:
        path: /var/lib/mysql/grastate.dat
        line: "safe_to_bootstrap: 1"
        regexp: "^safe_to_bootstrap.*"
      delegate_to: "{{ mariadb_bootstrap_node }}"
      when: mariadb_bootstrap_node_grastate.stat.exists

    - name: Start the bootstrap node
      shell: "galera_new_cluster"
      delegate_to: "{{ mariadb_bootstrap_node }}"

    - name: Wait for bootstrap node to be fully online
      shell: "clustercheck"
      register: bootstrap_status
      delegate_to: "{{ mariadb_bootstrap_node }}"
      until: bootstrap_status.rc == 0
      changed_when: false
      retries: 30
      delay: 10
      when: mariadb_start_all_nodes|default(true)

    - name: Ensure Mariadb users needed for the cluster are created
      import_tasks: "cluster-users.yml"
      delegate_to: "{{ mariadb_bootstrap_node }}"
      when: mariadb_previously_started_nodes | length == 0

- name: Start all nodes
  when: mariadb_start_all_nodes|default(true)
  run_once: true
  block:
    - name: Start MariaDB service
      service:
        name: mariadb
        state: started
      delegate_to: "{{ item }}"
      ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
      with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

    - name: Wait until MariaDB has joined the cluster
      shell: "/usr/local/bin/clustercheck"
      register: node_status
      delegate_to: "{{ item }}"
      changed_when: false
      until: node_status.rc == 0
      retries: 90
      delay: 10
      ignore_unreachable: "{{ mariadb_ignore_offline_nodes|default(false) }}"
      with_items: "{{ groups['mariadb_' + mariadb_cluster_name]|unique|sort }}"

