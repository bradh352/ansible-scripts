---
- name: Check to see if WordPress is already installed
  stat:
    path: "{{ wordpress_install_path }}/wp-admin"
  register: wordpress_installed

- name: Ensure we fetch the most current wordpress release
  delegate_to: localhost
  become: no
  file:
    path: /tmp/wordpress-latest.tar.gz
    state: absent
  when: not wordpress_installed.stat.exists
  run_once: true

- name: Download the latest wordpress release
  delegate_to: localhost
  become: no
  get_url:
    url: https://wordpress.org/latest.tar.gz
    dest: /tmp/wordpress-latest.tar.gz
  when: not wordpress_installed.stat.exists
  run_once: true

- name: Ensure directory exists for web content
  file:
    path: "{{ wordpress_install_path }}"
    state: directory
    owner: apache
    group: apache
    mode: 0750
    setype: httpd_sys_content_t

- name: Extract WordPress
  unarchive:
    src: /tmp/wordpress-latest.tar.gz
    copy: yes
    dest: "{{ wordpress_install_path }}"
    owner: apache
    group: apache
    setype: httpd_sys_content_t
    extra_opts: [--strip-components=1]
  when: not wordpress_installed.stat.exists

- name: cleanup download
  delegate_to: localhost
  become: no
  file:
    path: /tmp/wordpress-latest.tar.gz
    state: absent
  when: not wordpress_installed.stat.exists
  run_once: true

- name: create database for wordpress
  mysql_db:
    login_user: root
    login_password: "{{ vault_root_password }}"
    name: "{{ wordpress_db_name }}"
    state: present

- name: create db user for wordpress
  mysql_user:
    login_user: root
    login_password: "{{ vault_root_password }}"
    check_implicit_admin: true
    user: "{{ wordpress_db_user }}"
    password: "{{ wordpress_db_pass }}"
    host: "{{ item }}"
    priv: "{{ wordpress_db_name }}.*:ALL"
  with_items:
    - localhost
    - 127.0.0.1
    - ::1

- name: Create apache configuration for site
  template:
    src: apache_vhost.conf
    dest: "/etc/httpd/conf.d/{{ wordpress_domain }}.conf"
    owner: root
    group: root
    mode: 0644
  notify: httpd_restart

- name: Check to see if the WordPress keys have been generated
  stat:
    path: "{{ wordpress_install_path }}/wp-config-keys.php"
  register: wordpress_keys

- name: Configure WordPress keys.  Must only run once as otherwise will kill all existing sessions.
  template:
    src: wp-config-keys.php
    dest: "{{ wordpress_install_path }}/wp-config-keys.php"
    owner: apache
    group: apache
    mode: 0640
    setype: httpd_sys_content_t
  when: not wordpress_keys.stat.exists

- name: Configure WordPress
  template:
    src: wp-config.php
    dest: "{{ wordpress_install_path }}/wp-config.php"
    owner: apache
    group: apache
    mode: 0640
    setype: httpd_sys_content_t

- name: Set up .htaccess for mod_rewrite rules
  copy:
    src: htaccess
    dest: "{{ wordpress_install_path }}/.htaccess"
    owner: apache
    group: apache
    mode: 0640
    setype: httpd_sys_content_t

- name: Set up selinux policies to allow some areas to be writable by apache
  sefcontext:
    state: present
    setype: httpd_sys_rw_content_t
    target: "{{ wordpress_install_path }}{{ item }}"
  with_items:
    - "/wp-content(/.*)?"

- name: Apply new SELinux file context to filesystem
  command: restorecon -irv "{{ wordpress_install_path }}"
  register: restorecon
  changed_when: restorecon.stdout
